name: Terraform Security Scan

on:
  push:
    paths:
      - '**.tf'
      - '.github/workflows/terraform-scan.yml'
  pull_request:
    paths:
      - '**.tf'
      - '.github/workflows/terraform-scan.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  security-scan:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Terrascan
        run: |
          TERRASCAN_VERSION=$(curl -s https://api.github.com/repos/tenable/terrascan/releases/latest | jq -r '.tag_name')
          TERRASCAN_VERSION=${TERRASCAN_VERSION#v}
          wget https://github.com/tenable/terrascan/releases/download/v${TERRASCAN_VERSION}/terrascan_${TERRASCAN_VERSION}_Linux_x86_64.tar.gz -O terrascan.tar.gz
          tar -xf terrascan.tar.gz terrascan
          rm terrascan.tar.gz
          sudo install terrascan /usr/local/bin
          rm terrascan

      - name: Run Terrascan (Basic Scan)
        id: terrascan-basic
        run: |
          # Run initial scan and save results
          terrascan scan \
            -t gcp \
            -i terraform \
            -d . \
            -o json > terrascan-results.json
          
          # Also generate human-readable output
          terrascan scan \
            -t gcp \
            -i terraform \
            -d . \
            -o human | tee terrascan-human.txt
        continue-on-error: true

      - name: Run Advanced Security Checks
        id: advanced-checks
        run: |
          # Run additional security checks for high severity issues
          terrascan scan \
            -t gcp \
            -i terraform \
            -d . \
            --severity-level high \
            -o json > high-severity-results.json
          
          # Parse results and set output
          HIGH_COUNT=$(jq '.violations | map(select(.severity == "HIGH")) | length' terrascan-results.json)
          MEDIUM_COUNT=$(jq '.violations | map(select(.severity == "MEDIUM")) | length' terrascan-results.json)
          echo "::set-output name=high_severity_count::$HIGH_COUNT"
          echo "::set-output name=medium_severity_count::$MEDIUM_COUNT"
        continue-on-error: true

      - name: Generate valid SARIF file
        run: |
          # Create a guaranteed valid SARIF file
          # For actual SARIF generation from Terrascan, you might need a more sophisticated approach
          # or use Terrascan's native SARIF output if available and suitable.
          # This is a placeholder for GitHub Code Scanning integration.
          terrascan scan -i terraform -d . -o sarif > terrascan.sarif || \
          cat > terrascan.sarif << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "terrascan",
                    "informationUri": "https://github.com/tenable/terrascan",
                    "rules": []
                  }
                },
                "results": []
              }
            ]
          }
          EOF

      - name: Upload Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: terraform-scan-results
          path: |
            terrascan-results.json
            terrascan-human.txt
            high-severity-results.json
            terrascan.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always() # Always run this step to upload SARIF, even if previous steps failed
        continue-on-error: true # Prevent workflow failure if SARIF upload fails (e.g. Advanced Security not enabled)
        with:
          sarif_file: terrascan.sarif
          category: terrascan

      - name: Check Results and Fail if Necessary
        run: |
          echo "Summary of findings:"
          echo "High severity issues: ${{ steps.advanced-checks.outputs.high_severity_count }}"
          echo "Medium severity issues: ${{ steps.advanced-checks.outputs.medium_severity_count }}"
          
          HIGH_COUNT=${{ steps.advanced-checks.outputs.high_severity_count }}
          MEDIUM_COUNT=${{ steps.advanced-checks.outputs.medium_severity_count }}
          
          if [ "$HIGH_COUNT" -ge 4 ]; then
            echo "❌ Failed: 4 or more high severity issues found!"
            exit 1
          elif [ "$HIGH_COUNT" -gt 0 ]; then
            echo "⚠️ Warning: High severity issues found, but fewer than 4"
          fi
          
          if [ "$MEDIUM_COUNT" -gt 5 ]; then
            echo "⚠️ Warning: More than 5 medium severity issues found"
          fi
          
          echo "✅ Security scan passed or warnings issued."